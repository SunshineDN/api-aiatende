import OpenAIServices from "../services/openai/OpenAIServices.js";
import VApiServices from "../services/vapi/VApiServices.js";
import DateUtils from "../utils/DateUtils.js";
import styled from "../utils/log/styled.js";

export default class OpenAIWebController {

  static index(req, res, next) {
    try {
      res.status(200).json({ message: "OpenAI Controller is working!" });
    } catch (error) {
      if (!(error instanceof CustomError)) {
        styled.error(`[OpenAIWebController.index] - Erro inesperado na rota principal: ${error.message}`);
        return next(
          new Error("Erro inesperado na rota principal do OpenAI Controller")
        );
      }
    }
  }

  static async send_message(req, res, next) {
    const { lead_id, message: userMessage } = req.body;
    const openai = new OpenAIServices({ lead_id });

    try {
      const assistant_id = req.params.assistant_id || atob(process.env.OPENAI_ASSISTANT_ID);

      styled.info(`[OpenAIWebController.runAssistant] - User message: ${userMessage}`);

      const date = DateUtils.getActualDatetimeInformation();

      const additional_instructions = `
      System Additional Informations:
      ${date}`

      const { message, messages_history } = await openai.handleRunAssistant({ assistant_id, userMessage, additional_instructions });

      styled.success(`[OpenAIWebController.runAssistant] - Assistente executado com sucesso!`);
      styled.successdir(message);
      res.status(200).json({ message });
    } catch (error) {
      if (!(error instanceof CustomError)) {
        styled.error(`[OpenAIWebController.runAssistant] - Erro inesperado ao executar assistente: ${error.message}`);
        return next(error);
      }
    }
  }

  static async customAI(req, res, next) {
    const { niche } = req.body;

    try {
      const openai = new OpenAIServices();

      const instructions = `
      Voc√™ √© uma assistente virtual especializada no nicho de **${niche}**. 
      
      Seu papel √© agir como uma **consultora digital humanizada**, com linguagem natural, emp√°tica e adaptada ao perfil do p√∫blico que mais busca solu√ß√µes dentro desse nicho.  
      Voc√™ deve conduzir a conversa de forma leve, fluida e **inteligente**, como se fosse uma conversa entre pessoas reais, mas com efici√™ncia estrat√©gica.
      
      ---
      
      üéØ OBJETIVO PRINCIPAL
      
      - Qualificar completamente o lead, identificando:
        - Necessidade real
        - Urg√™ncia
        - Perfil de cliente ideal
        - Capacidade de investimento (sem parecer invasiva)
        - N√≠vel de consci√™ncia sobre o produto/servi√ßo
      - Estabelecer conex√£o emocional e profissional
      - Transferir o lead qualificado para o consultor humano/vendedor
      
      ---
      
      üß≠ COMO AGIR
      
      - Sempre seja natural, gentil e assertiva.
      - N√£o use termos gen√©ricos. Toda a comunica√ß√£o deve ser **personalizada para o nicho ${niche}**, com vocabul√°rio t√©cnico, exemplos reais e analogias pr√°ticas do setor.
      - Utilize perguntas abertas e estrat√©gicas para aprofundar a conversa e identificar o momento do lead na jornada de compra.
      - Use valida√ß√£o emocional (‚ÄúEntendo perfeitamente‚Äù, ‚ÄúIsso √© muito comum mesmo‚Äù, ‚ÄúFico feliz que tenha compartilhado isso‚Äù) ao longo da conversa.
      - Nunca pare a conversa com respostas fechadas ‚Äî sempre estimule o lead a seguir interagindo.
      - Quando a d√∫vida for t√©cnica ou espec√≠fica do servi√ßo, responda com seguran√ßa e clareza, com base nas melhores pr√°ticas do nicho.
      
      ---
      
      üìã ESTRUTURA DE QUALIFICA√á√ÉO
      
      1. **Abertura e acolhimento**
         > ‚ÄúOi! Que bom te ver por aqui üòä Posso te ajudar a encontrar exatamente o que precisa?‚Äù
      
      2. **Identificar necessidade**
         > ‚ÄúVoc√™ est√° procurando algo espec√≠fico dentro de ${niche}? Me conta um pouquinho sobre o que voc√™ est√° buscando ou qual desafio est√° enfrentando.‚Äù 
      
      3. **Investigar o contexto**
         > ‚ÄúHoje em dia, como voc√™ tem lidado com essa situa√ß√£o?‚Äù
         > ‚ÄúJ√° chegou a buscar alguma solu√ß√£o antes?‚Äù
      
      4. **Identificar n√≠vel de urg√™ncia**
         > ‚ÄúVoc√™ est√° buscando resolver isso mais pro agora ou est√° se planejando pra daqui a um tempo?‚Äù
      
      5. **Mapear conhecimento e consci√™ncia**
         > ‚ÄúVoc√™ j√° conhece um pouco sobre as op√ß√µes que existem dentro de ${niche}? Posso te explicar com mais detalhes, se quiser!‚Äù 
      
      6. **Validar interesse e or√ßamento**
         > ‚ÄúDentro das solu√ß√µes que temos, existem op√ß√µes com diferentes n√≠veis de investimento. Voc√™ j√° tem uma ideia de quanto pretende investir nisso, ou prefere que eu te mostre as possibilidades?‚Äù
      
      7. **Encaminhar para um especialista humano**
         > ‚ÄúPelo que voc√™ me contou, voc√™ j√° est√° super alinhado(a) com o que oferecemos! Posso te colocar em contato direto com um especialista que vai te mostrar o melhor caminho, sem compromisso, tudo bem?‚Äù
      
      ---
      
      üí¨ ESTILO DE COMUNICA√á√ÉO
      
      - Calor humano + intelig√™ncia estrat√©gica.
      - Mistura de tom consultivo + acolhedor, sem parecer rob√≥tico.
      - Utilize emojis com modera√ß√£o, apenas quando fizer sentido com o tom emocional da conversa.
      - Evite listas secas, transforme em conversas.
      - Linguagem acess√≠vel, mas compat√≠vel com o n√≠vel do p√∫blico-alvo do nicho.
      
      ---
      
      üß© PERSONALIZA√á√ÉO POR NICHO
      
      Adapte todo o discurso conforme o nicho: 
      
      - Ex: nicho = "Est√©tica Avan√ßada" ‚Üí Foco em autoestima, rejuvenescimento, procedimentos e seguran√ßa. 
      - Ex: nicho = "Treinamento Imobili√°rio" ‚Üí Foco em leads, obje√ß√µes, t√©cnicas de venda e metas. 
      - Ex: nicho = "Mentoria Jur√≠dica" ‚Üí Tom t√©cnico e respeitoso, voltado ao crescimento profissional. 
      
      ---
      `;

      const assistant = await openai.createAssistant({
        name: `IA Especialista em ${niche}`,
        instructions,
        model: "gpt-4.1-mini"
      });

      const prompt = `
      Voc√™ √© um gerador de objetos JSON para configura√ß√£o de assistentes virtuais.

      Sua tarefa √©, a partir das informa√ß√µes fornecidas sobre um assistente (como nicho ou setor de atua√ß√£o), gerar um objeto JSON com a seguinte estrutura, e retornar **apenas o objeto JSON em formato JSON.stringify**, sem nenhum texto explicativo antes ou depois:

      {
        id: "asst_zJZSIH8bVVzENET00X5GXpf7",
        name: "IA Especialista em ${niche}",
        description: "Especialista em ${niche} com conhecimento avan√ßado do setor",
        status: "online",
        avatar: "üéØ",
        specialties: ["${niche}", "Consultoria", "Estrat√©gia"],
        isCustom: true
      }

      Exemplo de entrada:
      niche: "Odontologia Est√©tica"

      Sa√≠da esperada:
      {\"id\":\"custom-1718642345678\",\"name\":\"IA Odontologia Est√©tica\",\"description\":\"Especialista em Odontologia Est√©tica com conhecimento avan√ßado do setor\",\"status\":\"online\",\"avatar\":\"ü¶∑\",\"specialties\":[\"Odontologia Est√©tica\",\"Automa√ß√£o\",\"An√°lise de Dados\"],\"isCustom\":true}

      Os dados sempre √© voc√™ quem preenche beaseado no que recebe do usu√°rio.`

      const responseJsonStringify = await openai.chatCompletion({
        systemMessage: prompt,
        userMessage: `O assistente criado √©: ${JSON.stringify(assistant)}`,
      });

      const parsedResponse = JSON.parse(responseJsonStringify);

      styled.success(`[OpenAIWebController.custom_assistant] - Assistente personalizado criado com sucesso!`);
      styled.successdir(parsedResponse);
      res.status(200).json(parsedResponse);
    } catch (error) {
      if (!(error instanceof CustomError)) {
        styled.error(`[OpenAIWebController.custom_assistant] - Erro inesperado ao criar assistente personalizado: ${error.message}`);
        return next(error);
      }
    }

  }

  static async executeAiPhone(req, res, next) {
    const { phoneNumber: phone_number, aiId: assistant_id } = req.body;

    try {
      if (!phone_number || !assistant_id) {
        throw new Error("phone_number and assistant_id are required");
      }

      const vapi = new VApiServices({ token: process.env.VAPI_API_KEY });

      styled.info(`[OpenAIWebController.executeAiPhone] - Calling assistant with phone number: ${phone_number} and assistant ID: ${assistant_id}`);

      const response = await vapi.callToAssistant({ assistant_id, phone_number });

      styled.success(`[OpenAIWebController.executeAiPhone] - Assistant called successfully!`);
      styled.successdir(response);
      res.status(200).json(response);
    } catch (error) {
      if (!(error instanceof CustomError)) {
        styled.error(`[OpenAIWebController.executeAiPhone] - Error calling assistant: ${error.message}`);
        return next(error);
      }
    }
  }
}
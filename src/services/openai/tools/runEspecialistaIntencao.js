import KommoUtils from "../../../utils/KommoUtils.js";
import styled from "../../../utils/log/styled.js";
import KommoServices from "../../kommo/KommoServices.js";
import OpenAIServices from "../OpenAIServices.js";

/**
 * Tool/fun√ß√£o para tratar a chamada da assistente OpenAI "especialista_intencao".
 * Detecta a inten√ß√£o e atualiza a etapa do usu√°rio no CRM a cada nova mensagem.
 * 
 * @param {Object} params
 * @param {string} params.conversation_summary - Resumo do hist√≥rico do usu√°rio.
 * @param {string} params.lead_id - ID do lead no CRM.
 * @param {Array} params.intention_history - Hist√≥rico de inten√ß√µes do lead.
 * @returns {Promise<Object>} Resultado da detec√ß√£o de inten√ß√£o e atualiza√ß√£o do CRM.
 */
export async function runEspecialistaIntencao({ conversation_summary, lead_id, intention_history } = {}) {
  if (typeof lead_id !== 'string' || !lead_id.trim()) {
    throw new Error('Par√¢metro "lead_id" √© obrigat√≥rio e deve ser uma string n√£o vazia.');
  }

  const prompt = `
# Hist√≥rico de inten√ß√µes anteriores do lead: [${intention_history.length > 0 ? intention_history.map(i => i.id).join(', ') : 'Nenhuma inten√ß√£o anterior detectada.'}]

# üéØ Objetivo  
Com base na mensagem-resumo da conversa atual do lead, identificar **exclusivamente o ID da inten√ß√£o correspondente ao est√°gio mais avan√ßado do funil**, respeitando a ordem sequencial das inten√ß√µes j√° registradas e evitando retrocessos no fluxo, exceto no caso de \`#Reagendamento\`.

## üë§ Persona  
Leads e pacientes interagindo via WhatsApp, chatbot ou CRM no funil odontol√≥gico da Dental Sant√©.

## ‚öôÔ∏è Instru√ß√µes para an√°lise  
1. Considere o hist√≥rico de inten√ß√µes j√° registradas para o lead e avalie qual etapa ele atingiu at√© o momento.  
2. A mensagem-resumo reflete o contexto atual ‚Äî retorne **apenas a inten√ß√£o atual v√°lida**: ou repita a √∫ltima etapa v√°lida, ou avance para a pr√≥xima etapa l√≥gica no funil.  
3. **N√£o retorne nenhuma etapa anterior j√° superada**, exceto para \`#Reagendamento\` que pode levar a \`#PosAgendamento\`.  
4. Aplique as defini√ß√µes de inten√ß√µes abaixo para identificar a etapa correta, respeitando a progress√£o sequencial do funil.

## üóÇÔ∏è Fluxo sequencial de inten√ß√µes e crit√©rios  

| ID                | Descri√ß√£o                                                                                   |
|-------------------|---------------------------------------------------------------------------------------------|
| \`#RecepcaoVirtual\`    | Primeiro contato, sauda√ß√µes ou d√∫vidas iniciais sem interesse claro.                        |
| \`#Qualificado\`        | Interesse geral em tratamentos, conv√™nios, equipe, mas sem inten√ß√£o de agendar.          |
| \`#InformacaoTratamento\` | Pedido espec√≠fico sobre tratamentos (implantes, clareamento, Invisalign, etc.).          |
| \`#PreAgendamento\`     | Desejo de agendar, por√©m sem dados ou escolha de hor√°rio definida.                        |
| \`#Agendamento\`        | Sele√ß√£o ou confirma√ß√£o de data e hor√°rio para consulta.                                  |
| \`#Cadastro\`           | Fornecimento de dados pessoais para agendamento (nome, telefone, nascimento, bairro).    |
| \`#PosAgendamento\`     | Consulta agendada; confirma√ß√µes, lembretes, valida√ß√µes de endere√ßo.                       |
| \`#Reagendamento\`      | Pedido para remarcar consulta ou resposta a tentativa de reativa√ß√£o ap√≥s aus√™ncia.        |
| \`#Desmarcar\`          | Solicita√ß√£o de cancelamento ou desmarca√ß√£o da consulta.                                  |
| \`#Indefinido\`         | Mensagem vaga, amb√≠gua ou sem inten√ß√£o clara.                                            |

## üîÅ Regras adicionais  
- Se o hist√≥rico estiver vazio, o lead deve come√ßar obrigatoriamente por \`#RecepcaoVirtual\`.  
- Caso o lead j√° tenha passado por etapas anteriores, ele s√≥ pode repetir a √∫ltima etapa ou avan√ßar para a pr√≥xima imediatamente posterior.  
- Exce√ß√£o especial: a partir de \`#Reagendamento\`, o lead pode retornar a \`#PosAgendamento\` ap√≥s reagendar.  
- Mensagens gen√©ricas como ‚Äúoi‚Äù, ‚Äúposso tirar d√∫vida?‚Äù retornam \`#RecepcaoVirtual\`.  
- Interesse gen√©rico em tratamentos/conv√™nios retorna \`#Qualificado\`.  
- Pedidos espec√≠ficos de tratamento retornam \`#InformacaoTratamento\`.  
- Desejo de agendar sem dados retorna \`#PreAgendamento\`.  
- Escolha/confirmar hor√°rio retorna \`#Agendamento\`.  
- Fornecimento de dados pessoais retorna \`#Cadastro\`.  
- Consulta j√° agendada e confirma√ß√£o retorna \`#PosAgendamento\`.  
- Pedido para remarcar retorna \`#Reagendamento\`.  
- Pedido para cancelar retorna \`#Desmarcar\`.  
- Caso n√£o seja poss√≠vel identificar a inten√ß√£o, retorne \`#Indefinido\`.

## ‚úçÔ∏è Formato da resposta  
- Retorne **apenas o ID da inten√ß√£o atual**, no formato \`#Intencao\`.  
- **Nunca inclua explica√ß√µes, m√∫ltiplas inten√ß√µes ou qualquer texto adicional.**`;

  const openai = new OpenAIServices();
  const response = await openai.chatCompletion({
    userMessage: `
    Resumo da conversa atual do lead: ${conversation_summary}`,
    systemMessage: prompt,
  });

  const kommo = new KommoServices({
    auth: process.env.KOMMO_AUTH,
    url: process.env.KOMMO_URL
  });
  const kommoUtils = new KommoUtils({ pipelines: await kommo.getPipelines() });

  const intent = response.toLowerCase().trim();
  let status;

  if (intent.includes('recepcao')) {
    status = kommoUtils.findStatusByName('recep√ß√£o virtual');
    styled.info(`Recep√ß√£o Virtual - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('qualificado')) {
    status = kommoUtils.findStatusByName('qualificado');
    styled.info(`Qualificado - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('tratamento')) {
    status = kommoUtils.findStatusByName('informa√ß√µes do tratamento');
    styled.info(`Tratamentos - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('preagendamento')) {
    status = kommoUtils.findStatusByName('pr√©-agendamento');
    styled.info(`Pr√©-Agendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('cadastro')) {
    status = kommoUtils.findStatusByName('dados cadastrais');
    styled.info(`Cadastro - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('posagendamento')) {
    status = kommoUtils.findStatusByCode('pr√©-agendamento', 142);
    styled.info(`P√≥s-Agendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('agendamento')) {
    status = kommoUtils.findStatusByName('pr√©-agendamento');
    styled.info(`Agendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('reagendamento')) {
    status = kommoUtils.findStatusByName('reagendamento');
    styled.info(`Reagendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('desmarcar')) {
    status = kommoUtils.findStatusByName('desmarcado');
    styled.info(`Desmarcado - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else {
    status = kommoUtils.findStatusByName('indefinido');
    styled.info(`Indefinido - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  }

  const update = await kommo.updateLead({
    id: lead_id,
    status_id: status.id,
    pipeline_id: status.pipeline_id
  });

  return {
    sucesso: true,
    intencaoDetectada: response,
    updateLead: update
  };
};
import KommoUtils from "../../../utils/KommoUtils.js";
import styled from "../../../utils/log/styled.js";
import KommoServices from "../../kommo/KommoServices.js";
import OpenAIServices from "../OpenAIServices.js";

/**
 * Tool/fun√ß√£o para tratar a chamada da assistente OpenAI "especialista_intencao".
 * Detecta a inten√ß√£o e atualiza a etapa do usu√°rio no CRM a cada nova mensagem.
 * 
 * @param {Object} params
 * @param {string} params.conversation_summary - Resumo do hist√≥rico do usu√°rio.
 * @param {string} params.lead_id - ID do lead no CRM.
 * @returns {Promise<Object>} Resultado da detec√ß√£o de inten√ß√£o e atualiza√ß√£o do CRM.
 */
export async function runEspecialistaIntencao({ conversation_summary, lead_id, intention_history } = {}) {
  if (typeof lead_id !== 'string' || !lead_id.trim()) {
    throw new Error('Par√¢metro "lead_id" √© obrigat√≥rio e deve ser uma string n√£o vazia.');
  }

  const prompt = `
# Inten√ß√µes do lead recebidas pelo sistema: [${intention_history.map(item => item.id).join(', ') || 'Nenhuma inten√ß√£o anterior detectada.'}]

# üéØ Objetivo  
Identificar com precis√£o **em qual est√°gio atual** do fluxo de atendimento o lead se encontra, com base em uma **mensagem-resumo da conversa completa**, retornando **apenas o ID da inten√ß√£o**, no formato \`#Intencao\`, para direcionamento automatizado no CRM da Dental Sant√©.

## üë§ Persona  
Leads e pacientes que interagem via WhatsApp, chatbot ou CRM nas etapas do funil de atendimento odontol√≥gico da Cl√≠nica Dental Sant√©. A mensagem a ser analisada ser√° **um resumo da conversa** atual com o lead.

## ‚öôÔ∏è Comportamento Esperado  
- Analisar profundamente a **mensagem-resumo** enviada.  
- Considerar a **sequ√™ncia l√≥gica de evolu√ß√£o do lead** pelas etapas.  
- **Nunca retornar uma inten√ß√£o anterior** j√° superada, com exce√ß√£o da inten√ß√£o \`#Reagendamento\`, que pode levar o lead de volta para \`#PosAgendamento\`.  
- Retornar apenas **um √∫nico ID de inten√ß√£o atual** conforme a lista abaixo.  
- Avaliar a **etapa mais avan√ßada mencionada** ou impl√≠cita na mensagem, ignorando passos anteriores.

## üóÇÔ∏è Inten√ß√µes Poss√≠veis (IDs v√°lidos)

| ID | Descri√ß√£o |
|----|-----------|
| \`#RecepcaoVirtual\` | Primeiro contato ou mensagem gen√©rica. Sem sinais de interesse, d√∫vidas iniciais, sauda√ß√µes. |
| \`#Qualificado\` | Demonstra interesse em saber mais sobre a cl√≠nica, tratamentos, conv√™nios ou equipe, mas **ainda n√£o manifesta inten√ß√£o de agendar**. |
| \`#InformacaoTratamento\` | Solicita informa√ß√µes espec√≠ficas sobre tratamentos odontol√≥gicos como implantes, Invisalign, clareamento etc. |
| \`#PreAgendamento\` | Deseja agendar consulta, mas **ainda n√£o forneceu dados nem escolheu hor√°rio**. Pode estar aguardando op√ß√µes. |
| \`#Agendamento\` | Est√° selecionando ou confirmando data e hor√°rio para consulta. |
| \`#Cadastro\` | Est√° fornecendo ou disposto a fornecer **dados pessoais** (nome, telefone, nascimento, bairro). |
| \`#PosAgendamento\` | Consulta j√° agendada; mensagens de confirma√ß√£o, lembrete ou valida√ß√£o de endere√ßo. |
| \`#Reagendamento\` | Deseja remarcar uma consulta agendada ou responde a tentativa de reativa√ß√£o ap√≥s aus√™ncia. |
| \`#Desmarcar\` | Deseja cancelar ou desmarcar a consulta agendada. |
| \`#Indefinido\` | Mensagem amb√≠gua, vaga ou sem contexto claro. Nenhuma inten√ß√£o pode ser identificada.

## üîÅ Regras de Progresso do Funil

- A inten√ß√£o **nunca deve regredir**. Por exemplo:
  - Se o usu√°rio est√° escolhendo data, **n√£o pode retornar \`#Qualificado\`**, mesmo que mencione informa√ß√µes da cl√≠nica.
  - Se a mensagem mostra que j√° houve agendamento, **n√£o pode retornar \`#Agendamento\`**, deve ser \`#PosAgendamento\`.
- **Exce√ß√£o √∫nica**: Se o lead deseja reagendar (\`#Reagendamento\`), pode retornar apenas a \`#PosAgendamento\` ap√≥s o reagendamento ser finalizado.

## üß† Regras Inteligentes

- Se a mensagem for apenas um ‚Äúoi‚Äù, ‚Äúboa tarde‚Äù, ‚Äúposso tirar uma d√∫vida?‚Äù, aplicar \`#RecepcaoVirtual\`.  
- Se for apenas interesse por tratamentos, valores, equipe ou conv√™nio, aplicar \`#Qualificado\`.  
- Se a pessoa deseja agendar, mas n√£o forneceu dados nem confirmou hor√°rio, aplicar \`#PreAgendamento\`.  
- Se est√° confirmando ou decidindo data/hora, aplicar \`#Agendamento\`.  
- Se est√° fornecendo nome, telefone, data de nascimento, aplicar \`#Cadastro\`.  
- Se a consulta j√° est√° marcada e est√° interagindo com lembretes ou confirmando dados, aplicar \`#PosAgendamento\`.  
- Se quer remarcar (ou respondeu lembrete ap√≥s faltar), aplicar \`#Reagendamento\`.  
- Se quer cancelar, aplicar \`#Desmarcar\`.  
- Se perguntar sobre Invisalign, implantes, clareamento, etc., aplicar \`#InformacaoTratamento\`.  
- Se n√£o for poss√≠vel identificar a inten√ß√£o, aplicar \`#Indefinido\`.

## ‚úçÔ∏è Estilo de Resposta  
- Retornar apenas o **ID da inten√ß√£o**, como \`#Agendamento\`  
- **Nunca** incluir qualquer explica√ß√£o, frase adicional ou observa√ß√£o.  
- **Nunca** retornar mais de um ID.

## üîí Restri√ß√µes  
- N√£o retornar etapas anteriores j√° superadas (exceto regra especial para \`#Reagendamento\`).  
- N√£o explicar a inten√ß√£o.  
- Retornar exatamente \`#Indefinido\` se nenhuma inten√ß√£o v√°lida puder ser reconhecida.`;

  const openai = new OpenAIServices();
  const response = await openai.chatCompletion({
    userMessage: conversation_summary,
    systemMessage: prompt,
  });

  const kommo = new KommoServices({
    auth: process.env.KOMMO_AUTH,
    url: process.env.KOMMO_URL
  });
  const kommoUtils = new KommoUtils({ pipelines: await kommo.getPipelines() });

  const intent = response.toLowerCase().trim();
  let status;

  if (intent.includes('recepcao')) {
    status = kommoUtils.findStatusByName('recep√ß√£o virtual');
    styled.info(`Recep√ß√£o Virtual - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('qualificado')) {
    status = kommoUtils.findStatusByName('qualificado');
    styled.info(`Qualificado - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('tratamento')) {
    status = kommoUtils.findStatusByName('informa√ß√µes do tratamento');
    styled.info(`Tratamentos - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('preagendamento')) {
    status = kommoUtils.findStatusByName('pr√©-agendamento');
    styled.info(`Pr√©-Agendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  }else if (intent.includes('cadastro')) {
    status = kommoUtils.findStatusByName('dados cadastrais');
    styled.info(`Cadastro - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('posagendamento')) {
    status = kommoUtils.findStatusByCode('pr√©-agendamento', 142);
    styled.info(`P√≥s-Agendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('agendamento')) {
    status = kommoUtils.findStatusByName('pr√©-agendamento');
    styled.info(`Agendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('reagendamento')) {
    status = kommoUtils.findStatusByName('reagendamento');
    styled.info(`Reagendamento - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('desmarcar')) {
    status = kommoUtils.findStatusByName('desmarcado');
    styled.info(`Desmarcado - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else {
    status = kommoUtils.findStatusByName('indefinido');
    styled.info(`Indefinido - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  }

  const update = await kommo.updateLead({
    id: lead_id,
    status_id: status.id,
    pipeline_id: status.pipeline_id
  });

  return {
    sucesso: true,
    intencaoDetectada: response,
    updateLead: update
  };
};
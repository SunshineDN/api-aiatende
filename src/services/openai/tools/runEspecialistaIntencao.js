import KommoUtils from "../../../utils/KommoUtils.js";
import styled from "../../../utils/log/styled.js";
import KommoServices from "../../kommo/KommoServices.js";
import OpenAIServices from "../OpenAIServices.js";

/**
 * Tool/fun√ß√£o para tratar a chamada da assistente OpenAI "especialista_intencao".
 * Detecta a inten√ß√£o e atualiza a etapa do usu√°rio no CRM a cada nova mensagem.
 * 
 * @param {Object} params
 * @param {string} params.conversation_summary - Resumo do hist√≥rico do usu√°rio.
 * @param {string} params.lead_id - ID do lead no CRM.
 * @param {Array} params.intention_history - Hist√≥rico de inten√ß√µes do lead.
 * @returns {Promise<Object>} Resultado da detec√ß√£o de inten√ß√£o e atualiza√ß√£o do CRM.
 */
export async function runEspecialistaIntencao({ conversation_summary, lead_id, intention_history } = {}) {
  if (typeof lead_id !== 'string' || !lead_id.trim()) {
    throw new Error('Par√¢metro "lead_id" √© obrigat√≥rio e deve ser uma string n√£o vazia.');
  }

  const prompt = `
# Hist√≥rico de inten√ß√µes anteriores do lead: [${intention_history.length > 0 ? intention_history.map(i => i.id).join(', ') : 'Nenhuma inten√ß√£o anterior detectada.'}]

# üéØ Objetivo  
Com base na mensagem-resumo da conversa atual do lead, identificar **exclusivamente o ID da inten√ß√£o correspondente ao est√°gio mais avan√ßado do funil**, respeitando a ordem sequencial das inten√ß√µes j√° registradas e evitando retrocessos no fluxo, exceto no caso de \`#Reagendamento\`.

## üë§ Persona  
Leads e pacientes interagindo via WhatsApp, chatbot ou CRM no funil odontol√≥gico da Dental Sant√©.

## ‚öôÔ∏è Instru√ß√µes para an√°lise  
1. Considere o hist√≥rico de inten√ß√µes j√° registradas para o lead e avalie qual etapa ele atingiu at√© o momento.  
2. A mensagem-resumo reflete o contexto atual ‚Äî retorne **apenas a inten√ß√£o atual v√°lida**: ou repita a √∫ltima etapa v√°lida, ou avance para a pr√≥xima etapa l√≥gica no funil.  
3. **N√£o retorne nenhuma etapa anterior j√° superada**, exceto para \`#Reagendamento\` que pode levar a \`#PosAgendamento\`.  
4. Aplique as defini√ß√µes de inten√ß√µes abaixo para identificar a etapa correta, respeitando a progress√£o sequencial do funil.

## üóÇÔ∏è Fluxo sequencial de inten√ß√µes e crit√©rios  

| ID | Descri√ß√£o |
|----|-----------|
| \`#RecepcaoVirtual\` | Primeiro contato ou mensagem gen√©rica. Sem sinais de interesse, d√∫vidas iniciais, sauda√ß√µes. |
| \`#Qualificado\` | Demonstra interesse em saber mais sobre a empresa, produtos, servi√ßos, combos, valores, etc. |
| \`#Indefinido\` | Mensagem amb√≠gua, vaga ou sem contexto claro. Nenhuma inten√ß√£o pode ser identificada.

## üß† Regras Inteligentes

- Se a mensagem for apenas um ‚Äúoi‚Äù, ‚Äúboa tarde‚Äù, ‚Äúposso tirar uma d√∫vida?‚Äù, aplicar \`#RecepcaoVirtual\`.  
- Se for apenas interesse por tratamentos, valores, equipe ou conv√™nio, aplicar \`#Qualificado\`.  
- Se n√£o for poss√≠vel identificar a inten√ß√£o, aplicar \`#Indefinido\`.

## ‚úçÔ∏è Estilo de Resposta  
- Retornar apenas o **ID da inten√ß√£o**, como \`#Qualificado\`  
- **Nunca** incluir qualquer explica√ß√£o, frase adicional ou observa√ß√£o.  
- **Nunca** retornar mais de um ID.

## üîí Restri√ß√µes  
- N√£o retornar etapas anteriores j√° superadas.  
- N√£o explicar a inten√ß√£o.  
- Retornar exatamente \`#Indefinido\` se nenhuma inten√ß√£o v√°lida puder ser reconhecida.`;

  const openai = new OpenAIServices();
  const response = await openai.chatCompletion({
    userMessage: `
    Resumo da conversa atual do lead: ${conversation_summary}`,
    systemMessage: prompt,
  });

  const kommo = new KommoServices({
    auth: process.env.KOMMO_AUTH,
    url: process.env.KOMMO_URL
  });
  const kommoUtils = new KommoUtils({ pipelines: await kommo.getPipelines() });

  const intent = response.toLowerCase().trim();
  let status;

  if (intent.includes('recepcao')) {
    status = kommoUtils.findStatusByName('recep√ß√£o virtual');
    styled.info(`Recep√ß√£o Virtual - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  } else if (intent.includes('qualificado')) {
    status = kommoUtils.findStatusByName('qualificado');
    styled.info(`Qualificado - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  }  else {
    status = kommoUtils.findStatusByName('indefinido');
    styled.info(`Indefinido - Inten√ß√£o detectada: ${intent} - Status: ${status.name}`);

  }

  const update = await kommo.updateLead({
    id: lead_id,
    status_id: status.id,
    pipeline_id: status.pipeline_id
  });

  return {
    sucesso: true,
    intencaoDetectada: response,
    updateLead: update
  };
};
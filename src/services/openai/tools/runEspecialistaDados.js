import DateUtils from "../../../utils/DateUtils.js";
import KommoUtils from "../../../utils/KommoUtils.js";
import KommoServices from "../../kommo/KommoServices.js";
import OpenAIServices from "../OpenAIServices.js";

export async function runEspecialistaDados({ nome = "", convenio = "", telefone = "", lead_id = "" } = {}) {
  const userMessage = `
Aqui estÃ£o meus dados:
Nome: ${nome}
NÃºmero de Telefone: ${telefone}
Plano de SaÃºde / ConvÃªnio: ${convenio}`;

  const prompt = `
  VocÃª Ã© um especialista em dados responsÃ¡vel por validar informaÃ§Ãµes cadastrais fornecidas por um cliente.

  ## âœ… Objetivo:
  - Verificar se os dados obrigatÃ³rios foram informados corretamente.
  - Validar se o **plano de saÃºde/convÃªnio informado Ã© um dos aceitos** pela clÃ­nica.

  ## ðŸ“‹ Dados fornecidos:
  Nome: ${nome}  
  Telefone: ${telefone}  
  Plano de SaÃºde / ConvÃªnio: ${convenio}

  ## ðŸ›‘ Lista de planos aceitos:
  UNIMED, AMIL, UNAFISCO, FACHESF, TRT-6, SAÃšDE CAIXA, PLAN-ASSISTES, MEDISERVICE, STELLANTIS, ALLIANZ SAÃšDE, CAMED, ASSEFAZ, CAPESAUDE, POSTAL SAÃšDE, GEAP, BANCO CENTRAL, AMEPE/CAMPE, CONAB, PF SAÃšDE, FISCO SAÃšDE, EMBRATEL, LIFE, PROASA

  ## ðŸ“Œ InstruÃ§Ãµes:
  - Responda de forma clara e objetiva.
  - Destaque **quais dados estÃ£o corretos** e **quais estÃ£o ausentes ou invÃ¡lidos**.
  - Se o plano informado **nÃ£o estiver na lista**, informe isso claramente.
  - Se **faltarem informaÃ§Ãµes**, oriente que o cliente precisa completÃ¡-las.
  - Se **todos os dados estiverem corretos**, informe que estÃ¡ tudo pronto para seguir com o atendimento.

  ## ðŸ•’ System Info:
  ${DateUtils.getActualDatetimeInformation()}`;


  const openai = new OpenAIServices();

  const response = await openai.chatCompletion({
    userMessage,
    systemMessage: prompt,
  });

  const kommo = new KommoServices({
    auth: process.env.KOMMO_AUTH,
    url: process.env.KOMMO_URL
  });
  const kommoUtils = new KommoUtils({ contacts_custom_fields: await kommo.getContactsCustomFields(), leads_custom_fields: await kommo.getLeadsCustomFields() });

  const lead_custom_fields = [];

  if (convenio) {
    const convenioField = kommoUtils.findLeadsFieldByName("ConvÃªnio");
    if (convenioField) {
      lead_custom_fields.push({ field_id: convenioField.id, values: [{ value: convenio }] });
    }
  }

  await kommo.updateLeadComplex({
    id: lead_id,
    name: nome,
    lead_custom_fields_values: lead_custom_fields,
    ...(telefone && { phone: kommoUtils.formatPhone(telefone) })
  });

  return {
    sucesso: true,
    mensagem: "AnÃ¡lise de dados concluÃ­da com sucesso.",
    dados: response,
  };
}
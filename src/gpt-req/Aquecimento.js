require('dotenv').config();
const OpenAIController = require('../controllers/OpenAIController');
const GetAccessToken = require('../services/kommo/GetAccessToken');
const GetAnswer = require('../services/kommo/GetAnswer');
const GetMessageReceived = require('../services/kommo/GetMessageReceived');
const SendLog = require('../services/kommo/SendLog');
const SendMessage = require('../services/kommo/SendMessage');

class Aquecimento {
  constructor() {
    this.assistant = this.assistant.bind(this);
    this.prompt = this.prompt.bind(this);
    this.aquecimento = this.aquecimento.bind(this);
    this.intencao = this.intencao.bind(this);
    this.nao_qualificado = this.nao_qualificado.bind(this);
  }

  async assistant(req, res, data) {
    let access_token;
    try {
      console.log('Enviando para o assistente GPT...');
      access_token = process.env.ACCESS_TOKEN || await GetAccessToken(req.body);

      console.log('Mensagem enviada para o assistente:', data.text);
      const { message } = await OpenAIController.generateMessage(data);
      console.log('Resposta recebida do assistente:', message);
      await SendMessage(req.body, message, access_token);
      res.status(200).send({ message: 'Mensagem enviada com sucesso para o assistente', response: message });
    } catch (error) {
      console.log(`Erro ao enviar mensagem para o assistente: ${error.message}`);
      await SendLog(req.body, `Erro ao enviar mensagem para o assistente: ${error.message}`, access_token);
      res.status(500).send('Erro ao enviar mensagem para o assistente');
    }
  }

  async prompt(req, res, text) {
    let access_token;
    try {
      console.log('Enviando prompt...');
      access_token = process.env.ACCESS_TOKEN || await GetAccessToken(req.body);
      console.log('Mensagem enviada para o prompt:', text);
      const { message } = await OpenAIController.promptMessage(text);
      console.log('Resposta recebida do prompt:', message);
      await SendMessage(req.body, message, access_token);
      res.status(200).send({ message: 'Prompt enviado com sucesso', response: message });
    } catch (error) {
      console.log(`Erro ao enviar prompt: ${error.message}`);
      await SendLog(req.body, `Erro ao enviar prompt: ${error.message}`, access_token);
      res.status(500).send('Erro ao enviar prompt');
    }
  }

  async aquecimento(req, res) {
    console.log('Assistant | BOT - Recep√ß√£o | Aquecimento do Lead...');
    try {
      const access_token = process.env.ACCESS_TOKEN || await GetAccessToken(req.body);
      const { lead_id: leadID } = req.body;
      const { assistant_id } = req.params;

      const message_received = await GetMessageReceived(req.body, access_token);

      const date = new Date().toLocaleString('pt-BR', { timeZone: 'America/Recife' });
      const weekOptions = {
        timeZone: 'America/Recife',
        weekday: 'long'
      };
      const weekDay = new Date().toLocaleDateString('pt-BR', weekOptions);
      const weekDayFormatted = weekDay.substring(0, 1).toUpperCase() + weekDay.substring(1).toLowerCase();

      const text = `System message: 'Adote a informa√ß√£o, dia de semana, data, hora, local e fuso hor√°rio atual s√£o: ${weekDayFormatted}, ${date}, Recife (GMT-3).

O usu√°rio entrou no fluxo do agendamento, ou seja, o usu√°rio quer ter informa√ß√µes sobre a cl√≠nica, algum tratamento espec√≠fico, ou valores.
Vamos mostrar nosso conhecimento com respostas bem precisas, mas de simples entendimento, al√©m de apresentar que Cl√≠nica Dental Sant√© atrav√©s da estrutura, dos equipamentos, da equipe podem faz muita diferen√ßa para realizar a sua consulta inicial. Crie cada vez mais desejo para que ele queira agendar sua consulta odontol√≥gica conosco. Nunca informar valores dos tratamentos odontol√≥gicos. N√£o oferecer nenhuma data para agendamento nesta etapa'

User message: '${message_received}'`;

      const data = {
        leadID,
        text,
        assistant_id,
      };

      await this.assistant(req, res, data);
    } catch (error) {
      console.log(`Erro ao enviar mensagem para a assistente: ${error.message}`);
      res.status(500).send('Erro ao enviar mensagem para a assistente');
    }
  }

  async intencao(req, res) {
    console.log('Prompt | BOT - Recep√ß√£o | Inten√ß√£o...');
    try {
      const access_token = process.env.ACCESS_TOKEN || await GetAccessToken(req.body);

      const message_received = await GetMessageReceived(req.body, access_token);
      const answer = await GetAnswer(req.body, access_token);

      const date = new Date().toLocaleString('pt-BR', { timeZone: 'America/Recife' });
      const weekOptions = {
        timeZone: 'America/Recife',
        weekday: 'long'
      };
      const weekDay = new Date().toLocaleDateString('pt-BR', weekOptions);
      const weekDayFormatted = weekDay.substring(0, 1).toUpperCase() + weekDay.substring(1).toLowerCase();

      const text = `System message: 'Aja como um especialista em an√°lise de dados para cl√≠nicas odontol√≥gicas.
Considere que voc√™ esteja analisando a inten√ß√£o de uma frase digitada por um usu√°rio em um chatbot. Dia de Semana, data, hora, local e fuso hor√°rio atual s√£o: ${weekDayFormatted}, ${date}, Recife (GMT-3). Analise a mensagem da cl√≠nica: ${answer} e veja em quais das situa√ß√µes abaixo encaixa a inten√ß√£o da resposta do usu√°rio: '${message_received}'.
#Saudacao: Para leads Realizando a Sauda√ß√£o (exemplo: Oi, Ol√°, Bom dia, Boa noite, Tudo bem? etc).

#tratamento: Para leads buscando informa√ß√µes dos tipos de tratamentos odontol√≥gicos, Implantes, Invisalign, Ortodontia, Extra√ß√£o, Limpeza, HOF, Lentes, Facetas, Pr√≥tese, Coroa, Siso, Cirurgia Oral, Periodontia, Odontopediatria e etc;

#Informacao: Para usu√°rio buscando informa√ß√µes sobre a cl√≠nica.

#valores: Para usu√°rio buscando valores dos servi√ßos ou consulta inicial.

#Agendamento: Para usu√°rio com inten√ß√£o clara de marcar uma consulta inicial (exemplo: sim, agendar, marcar, consulta).

#Profissional: Para usu√°rio interessados em emprego ou apresenta√ß√£o de produtos ou servi√ßos.

#Geral: Para os demais assuntos.

#1mes: Para usu√°rio que ainda n√£o pretendem agendar agora, mas tem a inten√ß√£o de agendar no futuro.

Responda apenas com o respectivo ID das op√ß√µes, que segue este padr√£o: "#palavra:" Exemplo: #Agendamento'`;
      await this.prompt(req, res, text);
    } catch (error) {
      console.log(`Erro ao enviar prompt: ${error.message}`);
      res.status(500).send('Erro ao enviar prompt');
    }
  }

  async nao_qualificado(req, res) {
    console.log('Assistant | BOT - Recep√ß√£o | N√£o Qualificado...');
    try {
      const access_token = process.env.ACCESS_TOKEN || await GetAccessToken(req.body);
      const message_received = await GetMessageReceived(req.body, access_token);
      const { lead_id: leadID } = req.body;
      const { assistant_id } = req.params;

      const date = new Date().toLocaleString('pt-BR', { timeZone: 'America/Recife' });
      const weekOptions = {
        timeZone: 'America/Recife',
        weekday: 'long'
      };
      const weekDay = new Date().toLocaleDateString('pt-BR', weekOptions);
      const weekDayFormatted = weekDay.substring(0, 1).toUpperCase() + weekDay.substring(1).toLowerCase();

      const text = `System message:
"Adote a informa√ß√£o, dia de semana, data, hora, local e fuso hor√°rio atual s√£o: ${weekDayFormatted}, ${date}, Recife (GMT-3).

Resposta do usu√°rio: ${message_received}

Avaliar a inten√ß√£o do usu√°rio:

1) Se a inten√ß√£o do usu√°rio for vender ou oferecer produto ou servi√ßos odontol√≥gico, m√©dicos ou de marketing, ent√£o conduza com a seguinte resposta, exemplo:
'Muito obrigado pelo seu interesse! 
Segue nosso e-mail: *contato@dentalsante.com.br*
Estamos direcionando o seu atendimento ao nosso setor administrativo e financeiro.

Em breve, te responder√£o!'

2) Se a inten√ß√£o do usu√°rio de se candidatar alguma vaga dispon√≠vel na cl√≠nica , ent√£o conduza com a seguinte resposta, exemplo:
'Muito obrigado pelo seu interesse! Segue nosso e-mail: *selecao@dentalsante.com.br*
Estamos direcionando o seu atendimento ao setor de Gest√£o de Pessoas.

Em breve, te responder√£o!'

3) Se for algum usu√°rio que j√° √© cliente antigo da Dental Sant√© e queira continuar o atendimento, ent√£o conduza com a seguinte resposta, exemplo:
'Como voc√™ j√° √© nosso cliente pe√ßo falar neste canal exclusivo* üòò Voc√™ tem prioridade em nossos atendimentos.
*Telefone ou WhatsApp*
*(81) 3094-0020*'

4) Se for algum usu√°rio que tenha entrado por engano com nada relacionado a odontologia, ent√£o conduza com a seguinte resposta, exemplo:
'Somos a Cl√≠nica Odontol√≥gica *Dental Sant√©*, estamos sempre √† disposi√ß√£o para Realizar o seu tratamento *sa√∫de e est√©tica Bucal*. Quando quiser estamos de portas aberta.'

5) Se for algum usu√°rio que queira deixar algum feedback positivo ou negativo sobre a cl√≠nica Dental Sant√©, ent√£o conduza com a seguinte resposta, exemplo:'
Agradecemos pelo seu Feedback.
Suas Sugest√µes, Elogios ou Reclama√ß√µes s√£o informadas diretamente √† nossa Diretoria.'

6) Sen√£o for nada do acima, ent√£o:
'Receba como usu√°rio novo.
Inicie a conversa perguntando o seu nome para demonstrar proximidade, e na sequ√™ncia entender os seus interesses e as suas d√∫vidas odontol√≥gicas. Mostrar que a cl√≠nica Dental Sant√© √© o local certo para resolver suas quest√µes de sa√∫de odontol√≥gicas.'"`;

      const data = {
        leadID,
        text,
        assistant_id,
      };

      await this.assistant(req, res, data);
    } catch (error) {
      console.log(`Erro ao enviar mensagem para a assistente: ${error.message}`);
      res.status(500).send('Erro ao enviar mensagem para a assistente');
    }
  }
}

module.exports = new Aquecimento();
